name: Vprofile_Actions
on: workflow_dispatch # Manuellement seulement (on le mettra a push après)
env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: vprofile-app-ecr
  EKS_CLUSTER: vprofile-eks

jobs:
  TESTING:
    runs-on: ubuntu-latest # Contient déjà Maven - pas besoin d'install
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
      
      - name: Maven test
        run: mvn test
      
      # Vérification de style (va générer target/checkstyle-result.xml)
      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      # Setup Java to be default (sonar-scanner requirements as of 5.x)  
      - name: Set Java 11
        uses: actions/setup-java@v3 # Provient de la market place des actions
        with:
          distribution: 'temurin' # See 'Supported distributions' for available
          java-version: 11
      
      # Setup sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7 # Il en existe plusieurs mais celui marche bien

      # Run Sonnar Scanner
      - name: SonarQube Scan
        run: sonar-scanner
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} 
          -Dsonar.sources=src/
          -Dsonar.junit.reportsPath=target/surefire-reports/ 
          -Dsonar.jacoco.reportsPath=target/jacoco.exec 
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml 
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ 

      # Check the Quality Gate Status
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} # Optional

  BUILD_AND_PUBLISH:
    needs: TESTING
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Build and upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          #cache_from: ${{ secrets.cache }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          #auto_tag: true
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: .
  DEPLOY_ON_EKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      # On configure les credentials AWS
      - name: Configure AWS credentials
        id: awscreds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # Pour avoir la commande kubectl pour installer via Helm
      - name: Get Kube config file
        id: getconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}      
      
      - name: Print config file
        run: car ~/.kube/config

      # On crée un secret kubernetes nommé regcred pour se connecter à l'ECR et récupérer l'image
      - name: Login to ECR
        run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password)
      
      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}   
          cluster-name: ${{ env.EKS_CLUSTER }} 
          # config-files: .github/values/dev/yaml
          chart-path: helm/vprofilecharts
          namespace: default
          values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
          name: vprofile-stack
                